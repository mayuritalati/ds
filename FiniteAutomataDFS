public class SearchStringUsingDFA
{
    public static final int NO_OF_CHARS = 256;
 
  
 
    public static void main(String[] args)
    {
       
        String text = "ababacaaa";
        String pattern = "ababaca";
        int[][] tArray  =  computeTransFuntion(pattern, NO_OF_CHARS);
        finiteAutomationMatcher(tArray, text, pattern.length());
        System.out.println();
    }



	private static void finiteAutomationMatcher(int[][] tArray, String text, int m) {
		int n = text.length();
		int q= 0;
		for (int i = 0; i < n; i++) {
			int index = text.charAt(i)-97;
			q = tArray[i][index];
			if(q == m){
				System.out.println(i-m+1);
				break;
			}
		}
		
	}





	private static int[][] computeTransFuntion(String pattern, int noOfChars) {
		int m = pattern.length();
		int[][] tArray = new int[pattern.length()+1][NO_OF_CHARS];
		for (int state = 0; state < m; state++) {
			for (int i = 0; i < NO_OF_CHARS; i++) {
				int k = Math.min(state+1, m);
				String pk;
				String pq;
				pk = pattern.substring(0, k);
				char nextchar = (char)(i+97);
				pq = pattern.substring(0, state)+nextchar;
				while(!isSuffix(pk, pq) && k > 0){
					k = k-1;
					pk = pattern.substring(0, k);
					pq = pattern.substring(0, state)+nextchar;
				}
				tArray[state][i] = k;
			}
		}
		return tArray;
		
	}



	private static boolean isSuffix(String pk, String pq) {
		int i=pk.length()-1;
		int j = pq.length()-1;
		while(i >=0){
			if(pk.charAt(i) == pq.charAt(j)){
				i--;
				j--;
			} else {
				return false;
			}
		}
		
		return true;
	}
}
